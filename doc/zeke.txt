*zeke.txt*  Neovim plugin for Zeke AI CLI integration

==============================================================================
CONTENTS                                                     *zeke-contents*

1. Introduction                    |zeke-introduction|
2. Requirements                    |zeke-requirements|
3. Installation                    |zeke-installation|
4. Configuration                   |zeke-configuration|
5. Usage                           |zeke-usage|
6. Commands                        |zeke-commands|
7. Functions                       |zeke-functions|
8. FAQ                             |zeke-faq|

==============================================================================
1. INTRODUCTION                                         *zeke-introduction*

Zeke.nvim is a Neovim plugin that integrates with the Zeke CLI - an
AI-powered development assistant built with Zig. It provides a seamless
interface for interacting with Zeke AI directly from your Neovim editor.

Features:
- Chat with Zeke AI in a floating terminal
- Edit code with natural language instructions
- Explain code snippets and functions
- Analyze code quality, security, and performance
- Generate new files from descriptions
- Auto-reload files when Zeke makes changes

==============================================================================
2. REQUIREMENTS                                         *zeke-requirements*

- Neovim 0.8.0 or higher
- Zeke CLI installed and accessible in PATH
- Zig programming language (for building Zeke CLI)

==============================================================================
3. INSTALLATION                                         *zeke-installation*

Using lazy.nvim: >
    {
      'ghostkellz/zeke.nvim',
      config = function()
        require('zeke').setup()
      end
    }
<

Using packer.nvim: >
    use {
      'ghostkellz/zeke.nvim',
      config = function()
        require('zeke').setup()
      end
    }
<

Using vim-plug: >
    Plug 'ghostkellz/zeke.nvim'
<

Then add to your init.lua: >
    require('zeke').setup()
<

==============================================================================
4. CONFIGURATION                                       *zeke-configuration*

Default configuration: >
    require('zeke').setup({
      cmd = 'zeke',           -- Path to zeke binary
      auto_reload = true,     -- Auto-reload files after edits
      keymaps = {
        chat = '<leader>zc',
        edit = '<leader>ze',
        explain = '<leader>zx',
        create = '<leader>zf',
        analyze = '<leader>za'
      }
    })
<

Configuration options:

*g:zeke_cmd*
    Path to the zeke binary. Default: 'zeke'

*g:zeke_auto_reload*
    Whether to automatically reload files after Zeke edits them.
    Default: true

*g:zeke_keymaps*
    Table of keymaps for Zeke commands. Set to {} to disable all keymaps.

==============================================================================
5. USAGE                                                       *zeke-usage*

Basic usage:
1. Install and configure the plugin
2. Use commands like :ZekeChat to interact with Zeke AI
3. Use keymaps for quick access to common functions

The plugin opens a floating terminal window where you can interact with
Zeke AI. The terminal supports:
- <Esc> to exit insert mode
- 'q' to close the terminal (in normal mode)

==============================================================================
6. COMMANDS                                                 *zeke-commands*

*:ZekeChat* [message]
    Start a chat session with Zeke AI. If message is provided, it will be
    sent immediately.

*:ZekeEdit* [instruction]
    Edit the current buffer using the provided instruction. If no instruction
    is provided, you'll be prompted for one.

*:ZekeExplain*
    Explain the current buffer or selection with Zeke AI.

*:ZekeCreate* [description]
    Create a new file based on the provided description.

*:ZekeAnalyze* [type]
    Analyze the current buffer. Types: quality, security, performance.
    Default: quality

==============================================================================
7. FUNCTIONS                                               *zeke-functions*

*zeke.setup({opts})*
    Setup function for configuring the plugin.
    
    Parameters:
        {opts} (table): Configuration options

*zeke.chat({message})*
    Start a chat with Zeke AI.
    
    Parameters:
        {message} (string): Optional message to send

*zeke.edit({instruction})*
    Edit current buffer with instruction.
    
    Parameters:
        {instruction} (string): Editing instruction

*zeke.explain({code})*
    Explain code with Zeke AI.
    
    Parameters:
        {code} (string): Optional code to explain (uses buffer if not provided)

*zeke.create({description})*
    Create new file from description.
    
    Parameters:
        {description} (string): Description of file to create

*zeke.analyze({type}, {code})*
    Analyze code with Zeke AI.
    
    Parameters:
        {type} (string): Analysis type (quality/security/performance)
        {code} (string): Optional code to analyze (uses buffer if not provided)

==============================================================================
8. FAQ                                                           *zeke-faq*

Q: The plugin says "zeke command not found"
A: Make sure the Zeke CLI is installed and in your PATH. You can also
   configure the full path using the 'cmd' option in setup().

Q: How do I disable the default keymaps?
A: Set keymaps = {} in your setup() configuration.

Q: Can I use custom keymaps?
A: Yes, configure them in the keymaps table in setup().

Q: The floating terminal doesn't close properly
A: Use 'q' in normal mode or <Esc> followed by 'q' to close the terminal.

==============================================================================
vim:tw=78:ts=8:ft=help:norl: